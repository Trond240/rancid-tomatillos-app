{"version":3,"sources":["components/MovieCard/MovieCard.js","actions/index.js","apicalls.js","containers/MovieCardContainer/MovieCardContainer.js","containers/MovieDetails/MovieDetails.js","containers/NavBar/NavBar.js","containers/LoginForm/LoginForm.js","components/LoginPage/LoginPage.js","components/App/App.js","serviceWorker.js","reducers/moviesList.js","reducers/index.js","reducers/loginFlow.js","reducers/loadReviews.js","reducers/updatePage.js","index.js"],"names":["connect","state","reviews","loadReviews","props","averageStars","userStars","currentReview","find","review","movie_id","id","createAverageStars","rating","color","numStars","Math","ceil","filledStars","Array","fill","emptyStars","concat","map","star","index","key","className","src","alt","createUserStars","averageRating","posterImage","title","to","data-testid","changePage","page","type","BASE","MovieCardContainer","movies","fetch","then","response","json","movieList","loadMovies","catch","err","console","error","message","movieCards","this","movie","poster_path","backdropImage","backdrop_path","releaseDate","release_date","overview","average_rating","onClick","sortMovies","Component","moviesList","dispatch","option","MovieDetails","successMsg","removedMsg","currentRating","disabled","res","data","setState","user","method","headers","body","JSON","stringify","addReview","ratings","setTimeout","log","undoRating","stars","createStars","rateMovie","backgroundImage","style","loginFlow","updatePage","logOut","clearReviews","navDiv","name","LoginForm","email","password","errorMessage","e","target","value","loginUser","fetchRatings","userFaves","isEnabled","length","onChange","handleChange","placeholder","submitLogin","LoginPage","movieOfDay","floor","random","App","path","exact","component","params","match","parseInt","Boolean","window","location","hostname","moment","require","format","rootReducer","combineReducers","action","stateCopy","sort","a","b","filter","store","createStore","composeWithDevTools","router","basename","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0173be1c.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.css';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst MovieCard = (props) => {\n  const currentReview = props.reviews.find(review => review.movie_id === props.id);\n  let averageStars;\n  let userStars\n  const createAverageStars = (rating, color) => {\n    const numStars = Math.ceil(rating);\n    const filledStars = Array(numStars).fill(`/rancid-tomatillos-app/images/star-${color}.svg`);\n    const emptyStars = Array(10 - numStars).fill(\"/rancid-tomatillos-app/images/star-clear-outline.svg\");\n    averageStars = filledStars.concat(emptyStars).map((star, index) => {\n      return (\n        <img key={index} className = \"star\" src ={`${star}`} alt = {`${color} star`} />\n      )\n    })\n  }\n \n  const createUserStars = (rating, color) => {\n    const numStars = Math.ceil(rating);\n    const filledStars = Array(numStars).fill(`/rancid-tomatillos-app/images/star-${color}.svg`);\n    const emptyStars = Array(10 - numStars).fill(\"/rancid-tomatillos-app/images/star-clear-outline.svg\");\n    userStars = filledStars.concat(emptyStars).map((star, index) => {\n      return (\n        <img key={index} className = \"star\" src ={`${star}`} alt = {`${color} star`} />\n      )\n    })\n  }\n  \n  if (currentReview) {\n    createUserStars(currentReview.rating, 'yellow')\n    createAverageStars(props.averageRating, 'green')\n  } else {\n    createAverageStars(props.averageRating, 'green')\n  }\n\n  return (\n    <section className=\"movie-card\">\n      <img\n        alt=\"movie poster\"\n        className=\"movie-poster\"\n        src={props.posterImage}\n      />\n      <h3>{props.title}</h3>\n        {currentReview ? <section className=\"rate-movie\">\n                            <p>Avg. Rating: {averageStars}</p>\n                            <p>Your Rating: {userStars}</p>\n                          </section> :\n                          <section className=\"rate-movie\">\n                            <p>Avg. Rating: {averageStars}</p>\n                          </section>}\n      <NavLink to={`/movies/${props.id}`}>\n        <button\n        data-testid={props.id}\n        className=\"movie-details-btn\">View Movie Details</button>\n      </NavLink>\n    </section>\n  )\n}\n\nconst mapStateToProps = state => ({\n  reviews: state.loadReviews\n});\n\nexport default connect(mapStateToProps, null)(MovieCard);","export const loadMovies = movies => ({\n  type: 'LOAD_MOVIES',\n  movies\n})\n\nexport const loginUser = user => ({\n  type: 'LOGIN_USER',\n  user\n})\n\nexport const addReview = review => ({\n  type: 'ADD_REVIEW',\n  review\n})\n\nexport const undoRating = review => ({\n  type: 'UNDO_RATING',\n  review\n})\n\nexport const loadReviews = reviews => ({\n  type: 'LOAD_REVIEWS',\n  reviews\n})\n\nexport const logOut = () => ({\n  type: 'LOGOUT_USER'\n})\n\nexport const clearReviews = () => ({\n  type: 'CLEAR_REVIEWS'\n})\n\nexport const changePage = page => ({\n  type: 'CHANGE_PAGE',\n  page\n})\n\nexport const showError = errorMessage => ({\n  type: 'SHOW_ERROR',\n  errorMessage\n})\n\nexport const sortMovies = option => ({\n  type: 'SORT_MOVIES',\n  option\n})","const BASE = 'https://rancid-tomatillos.herokuapp.com/api/v1'\n\nexport const fetchForMovies = () => {\n  return fetch(BASE + '/movies')\n      .then(response => response.json())\n}\n\nexport const postUser = (state) => {\n  return fetch(BASE + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({email: state.email, password: state.password})\n    })\n    .then(res => res.json())\n}\n\nexport const fetchRatings = (data) => {\n  return fetch(BASE + `/users/${data.user.id}/ratings`)\n    .then(res => res.json())\n}\n\nexport const fetchSpecificMovie = (id) => {\n  return fetch(`https://rancid-tomatillos.herokuapp.com/api/v1/movies/${id}`)\n    .then(res => res.json())\n}","import React, { Component } from 'react';\nimport MovieCard from '../../components/MovieCard/MovieCard';\nimport './MovieCardContainer.css';\nimport { loadMovies, sortMovies } from '../../actions';\nimport { connect } from 'react-redux';\nimport { fetchForMovies } from '../../apicalls'\n\nclass MovieCardContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: []\n    }\n  }\n\n  componentDidMount() {\n    fetchForMovies()\n      .then(movieList => {\n        this.props.loadMovies(movieList.movies)\n      })\n      .catch(err => console.error(err.message))\n  }\n\n  render() {\n    const { movies } = this.props;\n    const movieCards = movies.map(movie => {\n      return (\n        <MovieCard\n          key={movie.id}\n          id={movie.id}\n          title={movie.title}\n          posterImage={movie.poster_path}\n          backdropImage={movie.backdrop_path}\n          releaseDate={movie.release_date}\n          overview={movie.overview}\n          averageRating={movie.average_rating}\n        />\n      )\n    })\n    return (\n      <div className=\"movie-card-page\">\n        <div className=\"button-box\">\n          <button onClick={() => this.props.sortMovies('release-date')}>Sort By Release Date</button>\n          <button onClick={() => this.props.sortMovies('alphabetical')}>Sort Alphabetically</button>\n        </div>\n          <section data-testid=\"card-container\" className=\"movie-card-container\">\n            {movieCards}\n          </section>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  movies: state.moviesList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadMovies: movies => dispatch(loadMovies(movies)),\n  sortMovies: option => dispatch(sortMovies(option))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieCardContainer)","import React, { Component } from 'react';\nimport './MovieDetails.css';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { addReview } from '../../actions'\nimport { undoRating } from '../../actions'\nimport { fetchSpecificMovie } from '../../apicalls'\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: this.props.movies.find(movie => movie.id === this.props.id),\n      error: '',\n      successMsg: '',\n      removedMsg: '',\n      currentRating: null,\n      disabled: !this.props.reviews.find(review => review.movie_id === this.props.id)\n    }\n  }\n\n  componentDidMount() {\n    fetchSpecificMovie(this.props.id)\n      .then(data => data ? this.setState({movie: data.movie}) : '')\n      .catch(err => console.error(err.message))\n  }\n\n  rateMovie(index) {\n    const currentReview = this.props.reviews.find(review => review.movie_id === this.props.id);\n    if (this.props.user && !currentReview) {\n      const rating = index + 1;\n      fetch(`https://rancid-tomatillos.herokuapp.com/api/v1/users/${this.props.user.id}/ratings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ movie_id: this.props.id, rating: rating })\n      })\n        .then(res => res.json())\n        .then(data => {\n          fetch(`https://rancid-tomatillos.herokuapp.com/api/v1/users/${this.props.user.id}/ratings`)\n            .then(res => res.json())\n            .then(data => {\n              this.props.addReview(data.ratings.find(rating => rating.movie_id === this.state.movie.id))\n            })\n          this.setState({ \n            successMsg: `Your rating of ${data.rating.rating} stars has been successfully submitted`,\n            disabled: false\n        })\n          setTimeout(() => {\n            this.setState({\n              successMsg: '',\n            });\n          }, 2000);\n        })\n        .catch(err => this.setState({error: err.message}))\n    } else if(this.props.user) {\n      this.setState({error: 'Please undo your rating below to submit a new one.'});\n      setTimeout(() => {\n        this.setState({\n          error: ''\n        });\n      }, 2000);\n    } else {\n      this.setState({error: 'You must be logged in to review a movie'});\n      setTimeout(() => {\n        this.setState({\n          error: ''\n        });\n      }, 2000);\n    }\n  }\n\n  undoRating() {\n    fetch(`https://rancid-tomatillos.herokuapp.com/api/v1/users/${this.props.user.id}/ratings`)\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        currentRating: data.ratings.find(rating => rating.movie_id === this.state.movie.id)\n      }, () => {\n        fetch(`https://rancid-tomatillos.herokuapp.com/api/v1/users/${this.props.user.id}/ratings/${this.state.currentRating.id}`, {\n        method: 'DELETE',\n      })\n      .then(res => console.log(res))\n      .catch(err => console.error(err.message))\n      })\n    this.props.undoRating(this.state.currentRating)\n      this.setState({\n        currentRating: null,\n        disabled: true,\n        removedMsg: 'This rating has been removed'\n      })\n      setTimeout(() => {\n        this.setState({\n          removedMsg: ''\n        })\n      }, 2000)\n    })\n    .catch(err => console.error(err.message))\n  }\n\n  render() {\n    const ratingType = () => {\n      if (this.state.disabled) {\n        return 'Your Rating:'\n      } else {\n        return 'Avg. Rating:'\n      }\n    }\n    // might want to break out the movie destructuring so that we can use jest to mock it\n    const { movie } = this.state;\n    const currentReview = this.props.reviews.find(review => review.movie_id === this.props.id);\n    let stars;\n    const createStars = (rating, color) => {\n      const numStars = Math.ceil(rating);\n      const filledStars = Array(numStars).fill(`/rancid-tomatillos-app/images/star-${color}.svg`);\n      const emptyStars = Array(10 - numStars).fill(\"/rancid-tomatillos-app/images/star-clear-outline.svg\");\n      stars = filledStars.concat(emptyStars).map((star, index) => {\n        return (\n          <img key={index} onClick={() => this.rateMovie(index)} className = \"star\" src ={`${star}`} alt = {`${color} star`} />\n        )\n      })\n    }\n    if (movie && currentReview) {\n      createStars(currentReview.rating, 'yellow')\n    } else if (movie) {\n      createStars(this.state.movie.average_rating, 'green')\n    }\n\n    if(movie) {\n      const backgroundImage = {\n        backgroundImage: `url(${movie.backdrop_path})`\n      }\n      return (\n        <section className = \"details-section\" style = {backgroundImage}>\n          <div className = \"title-container\">\n            <h1>{movie.title}</h1>\n            <div className = \"stars-box\">\n      {ratingType()}{stars}\n            </div>\n            {this.state.error && <p>{this.state.error}</p>}\n            {this.state.successMsg && <p>{this.state.successMsg}</p>}\n            {this.state.removedMsg && <p>{this.state.removedMsg}</p>}\n            <button disabled={this.state.disabled} onClick={() => this.undoRating()}>undo rating</button>\n          </div>\n          <article className = \"movie-details\">\n            <h3>Released: {movie.release_date}</h3>\n            <p>{movie.overview}</p>\n          </article>\n          <NavLink to=\"/\">\n            <button type=\"button\">Back to Browse</button>\n          </NavLink>\n        </section>\n      )\n    } else {\n      return (<section>loading...</section>)\n    }    \n  }\n}\n\nconst mapStateToProps = state => ({\n  movies: state.moviesList,\n  user: state.loginFlow.user,\n  reviews: state.loadReviews\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addReview: review => dispatch(addReview(review)),\n  undoRating: review => dispatch(undoRating(review))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieDetails)","import React from 'react';\nimport './NavBar.css';\nimport { NavLink } from 'react-router-dom';\nimport { logOut, clearReviews, changePage } from '../../actions';\nimport { connect } from 'react-redux';\n\n\nconst NavBar = (props) => {\n    let navDiv;\n    if (props.page === 'login') {\n        navDiv = ''\n    } else if (props.user) {\n        navDiv = (<div className=\"nav-login-div\">\n                    <h4 className=\"user-name\">\n                        Welcome, {props.user.name}\n                    </h4>\n                    <NavLink\n                        to=\"/\"\n                        className=\"nav-login-link\">\n                        <button\n                        data-testid=\"logout-btn\"\n                        className=\"nav-login-button\"\n                        onClick={() => {\n                            props.logOut()\n                            props.clearReviews()\n                            props.changePage('movies')\n                        }}>\n                            Logout\n                        </button>\n                    </NavLink>\n                </div>)\n        } else {\n            navDiv = (<div className=\"nav-login-div\">\n                <h4 className=\"user-name\">\n                    Welcome! Please Login\n                </h4>\n                <NavLink\n                    to=\"/login\"\n                    className=\"nav-login-link\">\n                    <button\n                        data-testid=\"to-login-form\"\n                        className=\"nav-login-button\"\n                        onClick={() => props.changePage('login')}>\n                        Login\n                    </button>\n                </NavLink>\n            </div>)\n        }\n\n        return (\n            <section className=\"nav-bar\">\n                <div className=\"header-icon-container\">\n                    <h1 className=\"site-heading\">Rancid Tomatillos</h1>\n                    <img\n                        alt=\"tomato logo\"\n                        className=\"icon\"\n                        src= \"/rancid-tomatillos-app/images/tomato.svg\"\n                        />\n                </div>\n                {navDiv}\n            </section>\n        )\n    }\n\nconst mapStateToProps = state => ({\n  user: state.loginFlow.user,\n  page: state.updatePage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  logOut: () => dispatch(logOut()),\n  clearReviews: () => dispatch(clearReviews()),\n  changePage: page => dispatch(changePage(page))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","import React, { Component } from \"react\";\nimport './LoginForm.css';\nimport { connect } from 'react-redux';\nimport { loginUser, loadReviews, changePage } from '../../actions';\nimport { NavLink } from 'react-router-dom';\nimport { postUser, fetchRatings } from '../../apicalls'\n\nclass LoginForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      errorMessage: ''\n    }\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  submitLogin(e) {\n    postUser(this.state)\n      .then(data => {\n        this.props.loginUser(data)\n        fetchRatings(data)\n          .then(userFaves => this.props.loadReviews(userFaves.ratings))\n          .catch(err => console.error(err.message))\n      })\n     .catch(err => console.error(err.message))\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const isEnabled =  email.length > 0 &&  password.length > 0;\n    \n    return(\n      <section className=\"login-container\">\n        <form>\n          <h2>Login</h2>\n          <input\n            onChange={(e) => this.handleChange(e)}\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            value={this.state.email}/>\n          <input\n            onChange={(e) => this.handleChange(e)}\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            value={this.state.password}/>\n         <div\n            onClick={e => {\n              this.submitLogin(e)\n              this.props.changePage('movies')\n            }}\n            type=\"button\"\n            className=\"login-container\">\n               <NavLink\n                className=\"login-link\"\n                to=\"/\">\n                <button data-testid=\"to-movie-list\" disabled={!isEnabled} className=\"login-button\" type=\"button\">Login</button>\n              </NavLink>\n          </div>\n            <div>\n              <p>{this.state.errorMessage}</p>\n            </div>\n        </form>\n      </section>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  loginUser: user => dispatch(loginUser(user)),\n  loadReviews: reviews => dispatch(loadReviews(reviews)),\n  changePage: page => dispatch(changePage(page))\n})\n\nexport default connect(null, mapDispatchToProps)(LoginForm)","import React, { Component } from 'react'\nimport './LoginPage.css'\nimport LoginForm from '../../containers/LoginForm/LoginForm'\nimport { connect } from 'react-redux';\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      movieOfDay: this.props.movies[Math.floor(Math.random() * this.props.movies.length)]\n    }\n  }\n  render() {\n    const moviePoster = () => {\n      if (this.state.movieOfDay) {\n        return this.state.movieOfDay.poster_path\n      } else {\n        return 'https://image.tmdb.org/t/p/original//AuGiPiGMYMkSosOJ3BQjDEAiwtO.jpg'\n      }\n    }\n    return(\n      <section className=\"login-page\">\n        <LoginForm className=\"login-form\"/>\n        <div className=\"login-image-container\">\n          <h2>Movie Of The Day</h2>\n          <img className=\"login-img\" src={moviePoster()} alt=\"movie-poster\" />\n        </div>\n      </section>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  movies: state.moviesList\n})\nexport default connect(mapStateToProps, null)(LoginPage)\n","import React from 'react';\nimport './App.css';\nimport MovieCardContainer from '../../containers/MovieCardContainer/MovieCardContainer';\nimport MovieDetails from '../../containers/MovieDetails/MovieDetails';\nimport NavBar from '../../containers/NavBar/NavBar';\nimport LoginPage from '../LoginPage/LoginPage';\nimport { Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route\n            path=\"/\" exact\n            component={() =>\n              <MovieCardContainer />\n            }\n          />\n          <Route\n            path=\"/login\" exact\n            component={() =>\n              <LoginPage />\n            }\n          />\n          <Route\n            path=\"/movies/:movie_id\"\n            component={({ match }) => {\n              const { params } = match;\n              return (<MovieDetails\n                id={parseInt(params.movie_id)}\n              />)\n            }}\n          />\n          <Route\n            path=\"/users/:user_id/ratings\" exact\n            component={() =>\n              <MovieCardContainer />\n            }\n          />\n        </Switch>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","var moment = require('moment');\nmoment().format();\n\nexport const moviesList = (state = [], action) => {\n  switch (action.type) {\n    case 'LOAD_MOVIES':\n      return [...action.movies];\n    case 'SORT_MOVIES':\n      let stateCopy = [...state];\n      if (action.option === 'release-date') {\n        stateCopy.sort((a, b) => {\n          return moment(a.release_date) - moment(b.release_date)\n        })\n      } else if (action.option === 'alphabetical'){\n        stateCopy.sort((a, b) => {\n          if (a.title < b.title) {\n            return -1;\n          } else if (a.title < b.title) {\n            return 1;\n          } else {\n            return 0;\n          }\n        })\n      }\n      return stateCopy;\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport { moviesList } from './moviesList';\nimport { loginFlow } from './loginFlow';\nimport { loadReviews } from './loadReviews';\nimport { updatePage } from './updatePage';\n\n\nconst rootReducer = combineReducers({\n  moviesList,\n  loginFlow,\n  loadReviews,\n  updatePage,\n});\n\nexport default rootReducer;","export const loginFlow = (state = {}, action) => {\n  switch(action.type) {\n    case 'LOGIN_USER':\n      return {...state, ...action.user}\n    case 'LOGOUT_USER':\n      return {}\n    default:\n      return state;\n  }\n}\n\n","export const loadReviews = (state = [], action) => {\n  switch(action.type) {\n    case 'LOAD_REVIEWS':\n      return [...state, ...action.reviews];\n    case 'CLEAR_REVIEWS':\n      return [];\n    case 'UNDO_RATING':\n      return [...state].filter(review => review.id !== action.review.id)\n    case 'ADD_REVIEW':\n      return [...state, action.review]\n    default:\n      return state;\n  }\n}","export const updatePage = (state = 'movies', action) => {\n  switch(action.type) {\n    case 'CHANGE_PAGE':\n      return action.page\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nconst router = <BrowserRouter basename=\"/rancid-tomatillos-app\"><App></App></BrowserRouter>\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      {router}\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}